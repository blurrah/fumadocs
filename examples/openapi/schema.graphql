# This is a fake GraphQL schema with queries, mutations, and types

# Define custom scalar types
scalar DateTime
scalar EmailAddress

# Define an enum
enum UserRole {
  ADMIN
  USER
  GUEST
}

# Define types

"""
User type
"""
type User {
  id: ID!
  username: String!
  email: EmailAddress!
  role: UserRole!
  createdAt: DateTime!
  posts: [Post!]
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  comments: [Comment!]
  createdAt: DateTime!
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  createdAt: DateTime!
}

# Define input types for mutations
input CreateUserInput {
  username: String!
  email: EmailAddress!
  password: String!
}

input CreatePostInput {
  title: String!
  content: String!
}

input CreateCommentInput {
  content: String!
  postId: ID!
}

# Define Query type
type Query {
  user(id: ID!): User
  users: [User!]!
  post(id: ID!): Post
  posts: [Post!]!
  comments(postId: ID!): [Comment!]!
}

# Define Mutation type
type Mutation {
  createUser(input: CreateUserInput!): User!
  createPost(input: CreatePostInput!): Post!
  createComment(input: CreateCommentInput!): Comment!
  deletePost(id: ID!): Boolean!
  updateUserRole(userId: ID!, newRole: UserRole!): User!
}

# Define Subscription type
type Subscription {
  newPost: Post!
  newComment(postId: ID!): Comment!
}

# Define the schema
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
